#+TITLE: Chapter 2
#+AUTHOR: Jay Lee
#+STARTUP: latexpreview
#+LATEX_HEADER: \usepackage{bussproofs}

* Exercise 2.3
#+begin_src scheme
  (define zero '(diff (one) (one)))

  (define successor
    (lambda (diff-tree)
      `(diff ,diff-tree
	     (diff ,zero (one)))))

  (define predecessor
    (lambda (diff-tree)
      `(diff ,diff-tree (one))))

  (define diff-eval
    (lambda (diff-tree)
      (if (eqv? (car diff-tree) 'one)
	  1
	  (- (diff-eval (cadr diff-tree)) (diff-eval (caddr diff-tree))))))

  (define is-zero?
    ;; I cannot think of a clever solution that does not require evaluation of a diff-tree
    (lambda (diff-tree)
      (zero? (diff-eval diff-tree))))

  (define diff-tree-plus
    (lambda (t1 t2)
      `(diff ,t1
	     (diff ,zero ,t2))))

  ;; tests
  (list
   (is-zero? zero)
   (is-zero? (successor zero))
   (is-zero? (successor (predecessor zero)))
   (diff-eval zero)
   (diff-eval (successor zero))
   (diff-eval (predecessor zero))
   (let* ((one (successor zero))
	  (two (successor one))
	  (three (successor two))
	  (tree-5 (diff-tree-plus two three)))
     (diff-eval (diff-tree-plus two three))))
#+end_src

#+RESULTS:
: '(#t #f #t 0 1 -1 5)

* Exercise 2.12
The notion of `constructors' and 'observers' is quite vague.
We shall call one `constructor' if it accepts a message and/or arguments, and dispatch according to the message.
#+begin_src scheme
  (define empty-stack
    (lambda ()
      (lambda (msg)
	(cond
	 ((eqv? msg 'top) (error "Empty stack: cannot top"))
	 ((eqv? msg 'empty-stack?) #t)
	 ((eqv? msg 'pop) (error "Empty stack: cannot pop"))
	 (else (error "Unknown msg"))))))

  (define push
    (lambda (stack val)
      (lambda (msg)
	(cond
	 ((eqv? msg 'top) val)
	 ((eqv? msg 'empty-stack?) #f)
	 ((eqv? msg 'pop) stack)
	 (else (error "Unknown msg"))))))

  (define pop
    (lambda (stack) (stack 'pop)))

  (define top
    (lambda (stack) (stack 'top)))

  (define empty-stack?
    (lambda (stack) (stack 'empty-stack?)))

  ;; tests
  (list
   (empty-stack? (empty-stack))
   (top (push (empty-stack) 'elem))
   (top (pop (push (push (pop (push (empty-stack) 'a)) 'b) 'c))))
#+end_src

#+RESULTS:
: '(#t elem b)

Here, =empty-stack?= is a perdicate, and =pop= and =top= are extractors.

* Exercise 2.20
#+begin_src scheme
  (define number->bintree
    (lambda (n)
      `(root (,n () ()) ())))

  (define current-element
    (lambda (bintree) (caadr bintree)))

  (define left-son
    (lambda (bintree) (cadadr bintree)))

  (define right-son
    (lambda (bintree) (caddr (cadr bintree))))

  (define up-trace
    (lambda (bintree) (caddr bintree)))

  (define move-to-left-son
    (lambda (bintree)
      (list 'left
	    (left-son bintree)
	    (list (car bintree)
		  (list (current-element bintree)
			(up-trace bintree)
			(right-son bintree))))))

  (define move-to-right-son
    (lambda (bintree)
      (list 'right
	    (right-son bintree)
	    (list (car bintree)
		  (list (current-element bintree)
			(left-son bintree)
			(up-trace bintree))))))

  (define at-leaf?
    (lambda (bintree) (null? (cadr bintree))))

  (define is-root?
    (lambda (bintree)
      (eqv? (car bintree) 'root)))

  (define is-left-son?
    (lambda (bintree)
      (eqv? (car bintree) 'left)))

  (define is-right-son?
    (lambda (bintree)
      (eqv? (car bintree) 'right)))

  (define insert-to-left
    (lambda (n bintree)
      (list (car bintree)
	    (list (current-element bintree)
		  (list n (left-son bintree) '())
		  (right-son bintree))
	    (caddr bintree))))

  (define insert-to-right
    (lambda (n bintree)
      (list (car bintree)
	    (list (current-element bintree)
		  (left-son bintree)
		  (list n '() (right-son bintree)))
	    (caddr bintree))))

  (define move-up
    (lambda (bintree)
      (let ((up (up-trace bintree))
	    (this (cadr bintree)))
	(cond ((is-left-son? bintree)
	       (list (car up)
		     (list (caadr up)
			   this
			   (caddr (cadr up)))
		     (cadr (cadr up))))
	      ((is-right-son? bintree)
	       (list (car up)
		     (list (caadr up)
			   (cadr (cadr up))
			   this)
		     (caddr (cadr up))))
	      (else (error "Cannot move up"))))))

  (define at-root?
    (lambda (bintree)
      (eqv? (car bintree) 'root)))
#+end_src

* Custom syntax
#+name: macros
#+begin_src scheme
  (define identifier? symbol?) ;; identifier? not in Chicken

  (define-syntax define-datatype
    (syntax-rules ()
      ((_ type-name type-predicate-name
	  (variant-name (field-name predicate) ...) ...)
       (begin
	 (define type-predicate-name
	   (lambda (data)
	     (cond ((data 'variant-name) ; pass the name of the variant
		    (and (predicate (data 'field-name))
			 ...))
		   ...
		   (else #f))))
	 (define variant-name
	   (lambda (field-name ...)
	     (lambda (name)
	       (cond ((eqv? name 'variant-name) #t)
		     ((eqv? name 'field-name) field-name)
		     ...
		     ((eqv? name 'name) (list field-name ...))
		     (else #f)))))
	 ...))))
#+end_src

* Exercise 2.21
#+begin_src scheme :noweb yes
  <<macros>>
  
#+end_src

#+RESULTS:
: 1
